import sys

from redis.asyncio.client import Redis
from redis.exceptions import AuthenticationError, TimeoutError

from ..common.log import logger as log
from ..core.conf import settings


class RedisClient(Redis):
    """
    Redis 服务器连接类

    :param Redis: _description_
    """
    def __init__(self):
        super(RedisClient, self).__init__(
            host=settings.REDIS_HOST,
            port=settings.REDIS_PORT,
            password=settings.REDIS_PASSWORD,
            db=settings.REDIS_DATABASE,
            socket_timeout=settings.REDIS_TIMEOUT,
            decode_responses=True,  # 自动将从Redis服务器接收到的响应解码为字符串 utf-8。
        )

    async def open(self):
        """
        触发初始化连接

        :return:
        """
        try:
            # 尝试向Redis服务器发送一个PING命令，如果成功，说明Redis连接已经打开；
            # 如果失败，它会捕获异常并记录错误信息，然后退出程序。
            await self.ping()
        except TimeoutError:
            log.error('❌ 数据库 redis 连接超时')
            sys.exit()
        except AuthenticationError:
            log.error('❌ 数据库 redis 连接认证失败')
            sys.exit()
        except Exception as e:
            log.error('❌ 数据库 redis 连接异常 {}', e)
            raise

    async def delete_prefix(self, prefix: str, exclude: str | list = None):
        """
        删除指定前缀的所有key

        :param prefix: 要删除的key的前缀
        :param exclude: 要排除的key，可以是单个字符串或字符串列表，默认为None
        :return: None
        """
        keys = []
        async for key in self.scan_iter(match=f'{prefix}*'):
            if isinstance(exclude, str):
                if key != exclude:
                    keys.append(key)
            elif isinstance(exclude, list):
                if key not in exclude:
                    keys.append(key)
            else:
                keys.append(key)
        for key in keys:
            await self.delete(key)
    
    async def hello(self):
        """测试连接"""
        pass
    
    def command_docs(self):
        """获取所有命令文档"""
        pass    

    def latency_doctor(self):
        """获取延迟诊断"""
        pass
    
    def latency_graph(self):
        """获取延迟图表"""
        pass
    
    def latency_histogram(self):
        """获取延迟直方图"""
        pass
    
    def failover(self):
        """故障转移"""
        pass
    

# 创建redis连接对象
redis_client = RedisClient()
