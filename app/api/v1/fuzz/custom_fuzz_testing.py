"""自定义模糊测试api接口"""
from fastapi import APIRouter, Request
from app.schemas.fuzz_test_schema import (
    UpdateSuiteSchema, CaseSchema, UpdateCaseSchema, SuiteSchema
)
from schemas.fuzz_test_field_schema import *
from ...common.response.response_schema import response_base
from ...common.jwt import DependsJwtAuth
from ...services.fuzz_test_suite_service import FuzzTestSuiteService
from ...services.fuzz_test_case_service import FuzzTestCaseService
from ...services.fuzz_test_field_service import FuzzTestFieldService
from ...utils.serializers import select_as_dict

router = APIRouter(
    dependencies=[DependsJwtAuth]
)

###################################################################################################################################

# 新建模糊测试套件和用例以及字段
@router.post('/create/suite', summary='新建模糊测试套件')
async def create_suite(request: Request, suite: SuiteSchema):
    await FuzzTestSuiteService.create_suite(request, suite)
    return await response_base.success()

@router.post('/create/case', summary='新建模糊测试用例')
async def create_case(request: Request, case: CaseSchema):
    await FuzzTestCaseService.create_case(request, case)
    return await response_base.success()

@router.post('/create/filed', summary='新建字段')
async def create_field(
    request: Request, suite_name, case_name, field: Static | Simple | Delim | Group | RandomData | String | FromFile
        | Mirror | BitField | Byte | Bytes | Word | DWord | QWord
):
    await FuzzTestFieldService.create_field(request, suite_name, case_name, field)
    return await response_base.success()

######################################################################################################################################

@router.get('read/suite', summary='读取模糊测试套件')
async def read_suite(request: Request, suite_name: str):
    group = await FuzzTestSuiteService.read_suite(request, suite_name)
    group_data =  await select_as_dict(group)
    return await response_base.success(data=group_data)

@router.get('/read/case', summary="读取模糊测试用例")
async def read_case(request: Request, suite_name: str, case_name: str):
    case = await FuzzTestCaseService.read_case(request, suite_name, case_name)
    case_data = await select_as_dict(case)
    return await response_base.success(data=case_data)

@router.get('/read/field', summary='读取字段')
async def read_field(request: Request, suite_name, case_name, field_name):
    field = await FuzzTestFieldService.read_field(request, suite_name, case_name, field_name)
    field_data = await select_as_dict(field)
    return await response_base.success(data=field_data)

######################################################################################################################################

@router.put('/update/group', summary='更新模糊测试用例组')
async def update_group(request: Request, group: UpdateSuiteSchema):
    count = await FuzzTestSuiteService.update_suite(request, group)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查组是否存在")

@router.put('/update/case', summary='更新模糊测试用例')
async def update_case(request: Request, suite_name: str, case: UpdateCaseSchema):
    count = await FuzzTestCaseService.update_case(request, suite_name, case)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查用例是否存在")

@router.put('/update/field', summary='更新字段')
async def update_field(request: Request, suite_name, case_name, field_name, field: Static):
    count = await FuzzTestFieldService.update_field(request, suite_name, case_name, field_name, field)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查字段是否存在")

# #####################################################################################################################

# 删除 模糊测试用例套件 用例 原语 
@router.delete('/delete/suite', summary='删除模糊测试用例套件')
async def delete_suite(request: Request, suite_name: str):
    await FuzzTestSuiteService.delete_suite(request, suite_name)
    return await response_base.success()

@router.delete('/delete/case', summary='删除模糊测试用例')
async def delete_case(request: Request, suite_name: str, case_name: str):
    count = await FuzzTestCaseService.delete_case(request, suite_name, case_name)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="删除失败,请检查用例是否存在")

@router.delete('/delete/field', summary='删除字段')
async def delete_field(request: Request, suite_name, case_name, field_name):
    count = await FuzzTestFieldService.delete_field(request, suite_name, case_name, field_name)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="删除失败,请检查字段是否存在")

####################################################################################################################################