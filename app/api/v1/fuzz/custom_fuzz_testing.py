"""自定义模糊测试api接口"""
from fastapi import APIRouter, Request
from app.schemas.fuzz_test_suite_schema import (
    CreateSuiteSchema, ReadSuiteSchema, UpdateSuiteSchema, DeleteSuiteSchema
)
from app.schemas.fuzz_test_case_schema import (
    CreateCaseSchema, UpdateCaseSchema, DeleteCaseSchema, ReadCaseResponseSchema
)
from app.schemas.fuzz_test_field_schema import (
    CreateFieldSchema, ReadFieldResponseSchema, UpdateFieldSchema, DeleteFieldSchema
)
from app.common.jwt import DependsJwtAuth
from app.common.response.response_schema import response_base, ResponseModel
from app.services.fuzz_test_suite_service import FuzzTestSuiteService
from app.services.fuzz_test_case_service import FuzzTestCaseService
from app.services.fuzz_test_field_service import FuzzTestFieldService


router = APIRouter(dependencies=[DependsJwtAuth])

# 新建模糊测试套件和用例以及字段
@router.post('/create/suite', response_model=ResponseModel, summary='新建模糊测试套件')
async def create_suite(request: Request, suite: CreateSuiteSchema):
    """
    TODO
    """
    await FuzzTestSuiteService.create_suite(request, suite)
    return await response_base.success()

@router.get('read/suite', response_model=ReadSuiteSchema, summary='读取模糊测试套件')
async def read_suite(request: Request, suite_name: str = "system"):
    """返回套件的名称,描述,套件下所含的测试用例的名称"""
    suite = await FuzzTestSuiteService.read_suite(request, suite_name)
    return suite

@router.put('/update/suite', response_model=UpdateSuiteSchema, summary='更新模糊测试套件')
async def update_suite(request: Request, suite: UpdateSuiteSchema):
    """修改套件的名称和描述"""
    suite = await FuzzTestSuiteService.update_suite(request, suite)
    return suite

@router.delete('/delete/suite', response_model=ResponseModel, summary='删除模糊测试套件')
async def delete_suite(request: Request, suite: DeleteSuiteSchema):
    """TODO"""
    await FuzzTestSuiteService.delete_suite(request, suite.name)
    return await response_base.success()

@router.post('/create/case', summary='新建模糊测试用例')
async def create_case(request: Request, case: CreateCaseSchema):
    """
    TODO
    """
    await FuzzTestCaseService.create_case(request, case)
    return await response_base.success()

@router.get('/read/case', response_model=ReadCaseResponseSchema, summary="读取模糊测试用例")
async def read_case(request: Request, suite_name:str = "test_suite", case_name: str = "test_case"):
    """TODO"""
    case = await FuzzTestCaseService.read_case(request, suite_name, case_name)
    return case

@router.put('/update/case', response_model=ResponseModel,summary='更新模糊测试用例')
async def update_case(request: Request, case: UpdateCaseSchema):
    """修改模糊测试用例的名称和描述(不包括修改其字段)"""
    await FuzzTestCaseService.update_case(request, case)
    return await response_base.success()

@router.delete('/delete/case', response_model=ResponseModel,summary='删除模糊测试用例')
async def delete_case(request: Request, case: DeleteCaseSchema):
    """TODO"""
    await FuzzTestCaseService.delete_case(request, case.suite_name, case.name)
    return await response_base.success()

@router.post('/create/filed', response_model=ResponseModel,summary='新建字段')
async def create_field(request: Request, field: CreateFieldSchema):
    """TODO"""
    await FuzzTestFieldService.create_field(request, field)
    return await response_base.success()

@router.get('/read/field', response_model=ReadFieldResponseSchema, summary='读取字段')
async def read_field(
    request: Request, suite_name="test_suite", case_name="test_case", field_name="test_field"
):
    """TODO"""
    field = await FuzzTestFieldService.read_field(request, suite_name, case_name, field_name)
    return field


@router.put('/update/field', response_model=ResponseModel, summary='更新字段')
async def update_field(request: Request, field: UpdateFieldSchema):
    """修改一个字段的名称 属性 类型 等"""
    await FuzzTestFieldService.update_field(request, field)
    return await response_base.success()


@router.delete('/delete/field', response_model=ResponseModel, summary='删除字段')
async def delete_field(request: Request, field: DeleteFieldSchema):
    """TODO"""
    await FuzzTestFieldService.delete_field(request, field)
    return await response_base.success()
