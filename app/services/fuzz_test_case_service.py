from fastapi import Request

from schemas.fuzz_test_schema import CaseSchema, UpdateCaseSchema
from common.exception import errors
from crud.crud_fuzz_test_case import FUZZTESTCASEDAO
from crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from services.fuzz_test_suite_service import FuzzTestSuiteService
from crud.crud_fuzz_test_field import FUZZTESTFIELDDAO
from models import FuzzTestCase
from database.db_mysql import async_db_session



class FuzzTestCaseService:
    """
    Service class for managing fuzz test cases.
    """
    @staticmethod
    async def create_case(request, case_schema: CaseSchema):
        """
        创建一个模糊测试用例。

        :param request: 模糊测试用例请求。
        :param case_schema: 用例模式。
        :raises errors.NotFoundError: 如果找不到用户或用例组。
        """
        suite = FuzzTestSuiteService.read_suite(request, case_schema.suite_name)
        async with async_db_session.begin() as db:
            # 判断用例是否存在
            case = await FUZZTESTCASEDAO.read_case(db, suite.id, case_schema.name)
            if case:
                raise errors.NotFoundError(msg="用例已存在")
            await FUZZTESTCASEDAO.create_case(db, suite.id, case_schema.name, case_schema.desc)
        
    @staticmethod
    async def read_case(request: Request, suite_name: str, case_name: str) -> CaseSchema:
        """
        读取一个用例。

        :param request: 请求对象。
        :param suite_name: 用例所属的套件名称。
        :param case_name: 用例名称。
        :return: 用例对象。
        """
        suite = FuzzTestSuiteService.read_suite(request, suite_name)
        async with async_db_session.begin() as db:
            case = await FUZZTESTCASEDAO.read_case(db, case_name, suite.id)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            return case
    
    @staticmethod
    async def read_cases(request: Request, suite_name) -> list[FuzzTestCase]:
        """
        Read all cases in a suite.

        :param request: The request.
        :param suite_name: The name of the suite to which the case belongs.
        :return: A list of cases.
        """
        suite = await FuzzTestSuiteService.read_suite(request, suite_name)
        async with async_db_session.begin() as db:
            cases = await FUZZTESTCASEDAO.read_cases(db, suite.id)
            return cases

    @staticmethod
    async def update_case(request: CaseSchema, group_name: str, case: UpdateCaseSchema) -> int:
        """
        Update a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case: The updated case.
        :return: The number of affected rows in the database.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            row_count = await FUZZTESTCASEDAO.update_case(
                db, group.id, case.name, case.new_name, case.new_desc
            )
            return row_count

    @staticmethod
    async def delete_case(request: CaseSchema, suite_name: str, case_name: str) -> int:
        """
        Delete a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case_name: The name of the case to be deleted.
        :return: The number of deleted cases.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            
            case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            await FUZZTESTFIELDDAO.delete_field_by_case_id(db, case.id)
            result = await FUZZTESTCASEDAO.delete_case(db, group.id, case_name)
            return result.rowcount
        
    @staticmethod
    async def read_template_cases(cases_name: list):
        """
        判断一个测试套件模板中的测试用例是否存在

        :param cases_name: 含有测试用例名称的列表
        :raises errors.NotFoundError: 只要有一个测试用例不存在,就抛出错误
        """
        async with async_db_session.begin() as db:
            for case_name in cases_name:
                case = await FUZZTESTCASEDAO.read_case(db, case_name)
                if not case:
                    raise errors.NotFoundError(msg=f"用例 {case_name} 不存在")