from fastapi import Request
from ..crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from ..crud.crud_fuzz_test_case import FUZZTESTCASEDAO
from ..database.db_mysql import async_db_session
from ..schemas.fuzz_test_suite_schema import SuiteSchema, SuiteTemplateSchema, UpdateSuiteSchema

from ..models.fuzz_test_suite import FuzzTestSuite
from ..common.exception import errors


class FuzzTestSuiteService:
    """
    Service for handling fuzz test settings
    """
    @staticmethod
    async def read_all_suites(request: Request) -> list:
        """
        读取所有测试套件

        :param request: 请求对象
        :return: FuzzTestSuite对象列表
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            system_suites = await FUZZTESTSUITEDAO.read_system_suites(db)
            user_suites = await FUZZTESTSUITEDAO.read_user_suites(db, user_id)
            suites: list = system_suites + user_suites
            return suites
        
    @staticmethod
    async def read_suite(request, suite_name) -> dict | None:
        """
        读取一个模糊测试套件。

        :param request: 包含用户id的请求对象。
        :param suite_name: 套件的名称。
        :raises errors.ForbiddenError: 如果套件不存在。
        :return: 模糊测试套件。
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not suite:
                raise errors.ForbiddenError(msg="套件不存在")
            cases: list = await FUZZTESTCASEDAO.read_cases(db, suite.id)
            cases_name = [case.name for case in cases]
            return {"name": suite.name, "desc": suite.description, "cases_name": cases_name}
            
    @staticmethod
    async def create_suite(request: Request, suite_schema: SuiteSchema) -> FuzzTestSuite:
        """
        创建一个测试套件。

        :param request: 请求对象。
        :param suite_schema: 测试套件的模式。
        """
        suite_name = suite_schema.name
        async with async_db_session.begin() as db:
            suite = await FUZZTESTSUITEDAO.read_suite(db, request.user.id, suite_name)
            if suite:
                raise errors.ForbiddenError(msg="套件已存在")
            await FUZZTESTSUITEDAO.create_suite(db, request.user.id, suite_name, suite_schema.desc)

    @staticmethod
    async def create_template(request: Request, suite_template: SuiteTemplateSchema) -> None:
        """
        添加一个测试套件模板。

        :param request: 请求对象。
        :param suite_template: 测试套件模板的模式
        """
        suite_name = suite_template.name
        if await FuzzTestSuiteService.read_suite(request, suite_name) is not None:
            raise errors.ForbiddenError(msg='模板已存在')
        async with async_db_session.begin() as db:
            await FUZZTESTSUITEDAO.create_suite(
                db=db, user_id=request.user.id, name=suite_template.name,
                desc=suite_template.desc, is_user_saved=True, cases_name=suite_template.cases_name
            )

    @staticmethod
    async def update_suite(request: Request, old_suite: UpdateSuiteSchema) -> int:
        """
        更新测试套件。

        :param request: 请求对象。
        :param update_suite_schema: 更新套件的模式。
        :raises errors.ForbiddenError: 如果套件不存在，抛出ForbiddenError异常。
        :return: 返回更新后的套件
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            if not await FUZZTESTSUITEDAO.read_suite(db, user_id, old_suite.name):
                raise errors.ForbiddenError(msg="套件不存在")
            count = await FUZZTESTSUITEDAO.update_suite(
                db, user_id, old_suite.name, old_suite.new_name, old_suite.new_desc
            )
            if count <= 0:
                raise errors.ForbiddenError(msg="更新失败")
            new_suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, old_suite.new_name)
            return {
                "name": old_suite.name, "new_name": new_suite.name, "new_desc": new_suite.description
            }

    @staticmethod
    async def delete_suite(request, suite_name):
        """
        TODO
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not suite:
                raise errors.ForbiddenError(msg="不能删除不存在的套件!")
            return await FUZZTESTSUITEDAO.delete_suite(db, user_id, suite_name)
        
    @staticmethod
    async def is_suite_exist(user_id, suite_name):
        """
        判断名为suite_name的测试套件是否存在

        :param user_id: 用户id。
        :param suite_name: 测试套件名称。
        :return: 如果测试套件存在，返回True，否则返回False。
        """
        async with async_db_session.begin() as db:
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            return True if suite else False