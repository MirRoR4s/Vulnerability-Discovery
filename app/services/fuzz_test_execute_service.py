import threading
from boofuzz.blocks import Request as BoofuzzRequest
from boofuzz.primitives import *
from boofuzz import Session, Target, TCPSocketConnection, fuzz_logger_text
from ..services.fuzz_test_case_service import FuzzTestCaseService
from ..services.fuzz_test_field_service import FuzzTestFieldService
from ..database.db_mysql import async_db_session
from ..common.exception import errors


class FuzzTestExecuteService:

    @staticmethod
    async def _create_request(request, suite_name):
        requests = []
        cases: list = await FuzzTestCaseService.read_cases(request, suite_name)
        for case in cases:
            request: BoofuzzRequest = BoofuzzRequest(name=case.name)
            fields: list = await FuzzTestFieldService.read_fields(case.id)
            for field in fields:
                attribute: dict = field.attribute
                primitive = await FuzzTestExecuteService._convert(attribute)
                request.push(primitive)
            requests.append(request)
        return requests     

    @staticmethod
    async def _connect(requests, ip, port):
        """
        TODO
        """
        # 读取套件下的所有用例
        # 读取用例下的所有字段
        # 根据以上信息生成模糊测试用例（Boofuzz 原语）
        # 调用 Boofuzz 执行模糊测试
        # 保存模糊测试结果
        session = Session(
            target=Target(connection=TCPSocketConnection(ip, port)),
            web_address='0.0.0.0',
        )
        session.connect(requests[0])
        for i in range(1, len(requests) - 1):
            session.connect(requests[i-1], requests[i])
        session.connect(requests[-2], requests[-1])
        return session

    @staticmethod
    async def execute(request, ip: str, port: int, suite_name):
        requests = await FuzzTestExecuteService._create_request(request,suite_name)
        session = await FuzzTestExecuteService._connect(requests, ip, port)
        threading.Thread(target=session.fuzz).start()

    @staticmethod
    async def _convert(attribute: dict):
        """
        将 attribute 转换为 Boofuzz 原语
        """
        type = attribute.pop('type')

        if type == 'String':
            return String(**attribute)
            
        elif type == 'Delim':
            return Delim(**attribute)
        
        elif type == 'Static':
            return Static(**attribute)
        elif type == 'boolean':
            pass
        elif type == 'array':
            pass
        elif type == 'object':
            pass
        elif type == 'null':
            pass
        else:
            raise errors.NotFoundError(msg="不支持的类型")
