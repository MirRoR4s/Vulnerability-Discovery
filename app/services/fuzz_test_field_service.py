from fastapi import Request
from ..database.db_mysql import async_db_session
from ..crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from ..crud.crud_fuzz_test_field import FUZZTESTFIELDDAO
from ..crud.crud_fuzz_test_case import FUZZTESTCASEDAO
from ..models.fuzz_test_field import FuzzTestField
from ..common.exception import errors
from app.schemas.fuzz_test_field_schema import (
    CreateFieldSchema, UpdateFieldSchema, DeleteFieldSchema
)

class FuzzTestFieldService:
    """TODO"""    
    
    @staticmethod
    async def create_field(request: Request, field: CreateFieldSchema):
        """
        TODO
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            suite = await FuzzTestFieldService.read_suite(db, user_id, field.suite_name)
            # 获取用例id            
            case = await FuzzTestFieldService.read_case(db, suite.id, field.case_name)
            if await FUZZTESTFIELDDAO.read_field(db, case.id, field.name):
                raise errors.ForbiddenError(msg="字段已存在")
            await FUZZTESTFIELDDAO.create_field(db, case.id, field.name, field.type, field.attribute)
    
    @staticmethod
    async def read_field(request: Request, suite_name, case_name, field_name) -> FuzzTestField:
        """
        TODO
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            suite = await FuzzTestFieldService.read_suite(db, user_id, suite_name)
            case = await FuzzTestFieldService.read_case(db, suite.id, case_name)
            field = await FUZZTESTFIELDDAO.read_field(db, case.id, field_name)
            if not field:
                raise errors.NotFoundError(msg="字段不存在")
            return {"name": field.name, "type": field.type, "attribute": field.attribute, "suite_name": suite_name, "case_name": case_name}
        
    @staticmethod
    async def read_fields(case_id) -> list:
        """
        TODO
        """
        async with async_db_session.begin() as db:
            fields = await FUZZTESTFIELDDAO.read_fields(db, case_id)
            return fields
    
    @staticmethod
    async def update_field(request: Request, field_schema: UpdateFieldSchema):
        """
        TODO
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            # 获取用户所属的组id
            suite = await FuzzTestFieldService.read_suite(db, user_id, field_schema.suite_name)
            # 获取用例id            
            case = await FuzzTestFieldService.read_case(db, suite.id, field_schema.case_name)
            new_name, new_type, new_attribute = field_schema.new_name, field_schema.new_type, field_schema.new_attribute
            old_name = field_schema.name
            count = await FUZZTESTFIELDDAO.update_field(db, case.id, old_name, new_name, new_type, new_attribute)
            if count == 0:
                raise errors.ForbiddenError(msg="字段不存在")
            

    @staticmethod
    async def delete_field(request: Request, field: DeleteFieldSchema):
        """
        删除一个模糊测试字段

        :param request: 包含用户id的请求对象
        :param group_name: 包含用例的套件名称
        :param case_name: 包含字段的用例名称
        :param field_name: 字段名称
        :raises errors.NotFoundError: 当字段所属的用例不存在或是用例所属的套件不存在时抛出
        :return: 被删除的字段数
        """
        async with async_db_session.begin() as db:
            case = await FuzzTestFieldService.get_case_id(db, request.user.id, field.suite_name, field.case_name)
            count = await FUZZTESTFIELDDAO.delete_field(db, case.id, field.name)
            if count == 0:
                raise errors.ForbiddenError(msg="字段不存在")
        
    @staticmethod
    async def read_suite(db, user_id, suite_name):
        """TODO"""
        suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
        if not suite:
            raise errors.NotFoundError(msg="套件不存在")
        return suite
    
    @staticmethod
    async def read_case(db, suite_id, case_name):
        case = await FUZZTESTCASEDAO.read_case(db, case_name, suite_id)
        if not case:
            raise errors.NotFoundError(msg="用例不存在")
        return case
    
    @staticmethod
    async def get_case_id(db, user_id, suite_name, case_name):
        suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
        if not suite:
            raise errors.NotFoundError(msg="套件不存在")
        case = await FUZZTESTCASEDAO.read_case(db, case_name, suite.id)
        if not case:
            raise errors.NotFoundError(msg="用例不存在")
        return case