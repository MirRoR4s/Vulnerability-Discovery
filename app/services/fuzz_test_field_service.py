from fastapi import Request


from database.db_mysql import async_db_session
from crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from crud.crud_fuzz_test_field import FUZZTESTFIELDDAO
from crud.crud_fuzz_test_case import FUZZTESTCASEDAO
from .fuzz_test_field import FuzzTestField
from common.exception import errors
from schemas.fuzz_test_field_schema import FieldBaseSchema

class FuzzTestFieldService:
    
    @staticmethod
    async def create_field(request: Request, field):
        """
        创建一个模糊测试字段

        :param request: 包含用户id的请求对象
        :param field: 包含字段信息的请求体
        :raises errors.NotFoundError: 当字段所属的用例不存在或是用例所属的套件不存在时抛出
        :raises errors.ForbiddenError: 当字段已存在时抛出
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, field.suite_name)
            if not suite:
                raise errors.NotFoundError(msg="套件不存在")
            # 获取用例id            
            case = await FUZZTESTCASEDAO.read_case(db, field.case_name, suite.id)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            field = await FUZZTESTFIELDDAO.read_field(db, case.id, field.name)
            if field:
                raise errors.ForbiddenError(msg="字段已存在")
            await FUZZTESTFIELDDAO.create_field(db, case.id, dict(field))
    
    @staticmethod
    async def read_field(request: Request, suite_name, case_name, field_name) -> FuzzTestField:
        """
        读取一个模糊测试字段

        :param request: 含有用户id的请求对象
        :param suite_name: 字段所属用例所属的套件名称
        :param case_name: 字段所属用例的名称
        :param field_name: 字段的名称
        :raises errors.NotFoundError: _description_
        :raises errors.NotFoundError: _description_
        :raises errors.NotFoundError: _description_
        :return: 一个名为field_name的字段
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not suite:
                raise errors.NotFoundError(msg="套件不存在")
            case = await FUZZTESTCASEDAO.read_case(db, suite.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            field = await FUZZTESTFIELDDAO.read_field(db, case.id, field_name)
            if not field:
                raise errors.NotFoundError(msg="字段不存在")
            return field
        
    @staticmethod
    async def read_fields(case_id) -> list:
        """
        读取一个用例下的所有模糊测试字段

        :param request: 含有用户id的请求对象
        :param suite_name: 字段所属用例所属的套件名称
        :param case_name: 字段所属用例的名称
        :raises errors.NotFoundError: _description_
        :raises errors.NotFoundError: _description_
        :return: 一个名为field_name的字段
        """
        async with async_db_session.begin() as db:
            fields = await FUZZTESTFIELDDAO.read_fields(db, case_id)
            return fields
    
    @staticmethod
    async def update_field(request: Request, suite_name, case_name, field) -> int:
        """
        _summary_

        :param request: _description_
        :param suite_name: _description_
        :param case_name: _description_
        :param field: _description_
        :raises errors.NotFoundError: _description_
        :raises errors.NotFoundError: _description_
        :return: _description_
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            count = await FUZZTESTFIELDDAO.update_field(db, case.id, field.name, dict(field))
            return count

    @staticmethod
    async def delete_field(request: Request, suite_name, case_name, field_name) -> int:
        """
        删除一个模糊测试字段

        :param request: 包含用户id的请求对象
        :param group_name: 包含用例的套件名称
        :param case_name: 包含字段的用例名称
        :param field_name: 字段名称
        :raises errors.NotFoundError: 当字段所属的用例不存在或是用例所属的套件不存在时抛出
        :return: 被删除的字段数
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            count = await FUZZTESTFIELDDAO.delete_field(db, case.id, field_name)
            return count