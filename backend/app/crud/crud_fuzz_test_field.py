
from typing import Sequence
from sqlalchemy import select, delete, update
from sqlalchemy.ext.asyncio import AsyncSession

from backend.app.crud.base import CRUDBase
from backend.app.models import FuzzTestField
from backend.app.schemas.fuzz_test_field_schema import Fuzzable

class CRUDFuzzTestField(CRUDBase[FuzzTestField, Fuzzable, Fuzzable]):
    """
    
    """

    async def create_field(self, db: AsyncSession, case_id: int, attribute: dict) -> None:
        primitive = FuzzTestField(attribute=attribute, case_id=case_id)
        db.add(primitive)

    async def read_field(self, db: AsyncSession, case_id, primitive_name: str) -> FuzzTestField | None:
            primitive = await db.execute(
                select(self.model).where(self.model.name == primitive_name and self.model.case_id == case_id)
            )
            return primitive.scalars().first()
        
    async def read_fields(self, db: AsyncSession, case_id) -> Sequence[FuzzTestField]:
        fields = await db.execute(
            select(self.model).where(self.model.case_id == case_id)
        )
        return fields.scalars().all()
    
    async def read_variable(self, db: AsyncSession, case_id, variable_name: str) -> FuzzTestField | None:
            primitive = await db.execute(
                select(self.model).where(self.model.name == variable_name and self.model.case_id == case_id)
            )
            return primitive.scalars().first()

    async def update_field(self, db: AsyncSession, case_id, name, attribute) -> int:
        result = await db.execute(
            update(self.model).where(self.model.name == name and self.model.case_id == case_id).values(attribute=attribute)
        )
        return result.rowcount

    async def delete_field(self, db: AsyncSession, case_id, field_name) -> int:
        result = await db.execute(
            delete(self.model).where(self.model.name == field_name and self.model.case_id == case_id)
        )
        return result.rowcount
    
    async def delete_field_by_case_id(self, db: AsyncSession, case_id) -> int:
        result = await db.execute(
            delete(self.model).where(self.model.case_id == case_id)
        )
        return result.rowcount

FUZZTESTFIELDDAO = CRUDFuzzTestField(FuzzTestField)
