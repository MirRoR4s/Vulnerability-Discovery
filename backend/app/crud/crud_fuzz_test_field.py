
from typing import Sequence
from sqlalchemy import select, delete, update
from sqlalchemy.ext.asyncio import AsyncSession

from backend.app.crud.base import CRUDBase
from backend.app.models import FuzzTestField
from backend.app.schemas.fuzz_test_schema import PrimitiveSchema


class CRUDFuzzTestField(CRUDBase[FuzzTestField, PrimitiveSchema, PrimitiveSchema]):
    """
    
    """


    async def create_primitive(self, db: AsyncSession, case_id: int, attribute: dict) -> None:
        """
        Create a new primitive for a fuzz test field.

        :param db: The database session.
        :param case_id: The ID of the fuzz test case.
        :param attribute: The attributes of the primitive.
        """
        primitive = FuzzTestField(attribute=attribute, case_id=case_id)
        db.add(primitive)

    async def read_primitive(self, db: AsyncSession, case_id, primitive_name: str) -> Primitive | None:
            """
            Read a primitive from the database.

            :param db: The database session.
            :param case_id: The ID of the case.
            :param primitive_name: The name of the primitive.
            :return: The primitive object if found, otherwise None.
            """
            primitive = await db.execute(
                select(self.model).where(self.model.name == primitive_name and self.model.case_id == case_id)
            )
            return primitive.scalars().first()
    
    async def read_variable(self, db: AsyncSession, case_id, variable_name: str) -> Primitive | None:
            """
            Read a primitive from the database.

            :param db: The database session.
            :param case_id: The ID of the case.
            :param primitive_name: The name of the primitive.
            :return: The primitive object if found, otherwise None.
            """
            primitive = await db.execute(
                select(self.model).where(self.model.name == variable_name and self.model.case_id == case_id)
            )
            return primitive.scalars().first()

    async def update_primitive(
        self, db: AsyncSession, primitive_name, primitive_schema: PrimitiveSchema
    ) -> int:
        """
        Update a primitive in the database.

        :param db: The database session.
        :param primitive_name: The name of the primitive to update.
        :param primitive: The updated primitive data.
        """
        result = await db.execute(
            update(self.model).where(self.model.name == primitive_name).values(**primitive_schema.model_dump())
        )
        return result.rowcount

    async def delete_primitive(self, db: AsyncSession, case_id, primitive_name) -> int:
        """
        Delete a primitive from the database.

        :param db: The database session.
        :param primitive_name: The name of the primitive to delete.
        :return: The number of rows affected by the deletion.
        """
        result = await db.execute(
            delete(self.model).where(self.model.name == primitive_name and self.model.case_id == case_id)
        )
        return result.rowcount
    
    async def delete_primitive_by_case_id(self, db: AsyncSession, case_id) -> int:
        """
        Delete a primitive from the database.

        :param db: The database session.
        :param primitive_name: The name of the primitive to delete.
        :return: The number of rows affected by the deletion.
        """
        result = await db.execute(
            delete(self.model).where(self.model.case_id == case_id)
        )
        return result.rowcount
    
PRIMITIVEDAO = CRUDFuzzTestField(Primitive)
