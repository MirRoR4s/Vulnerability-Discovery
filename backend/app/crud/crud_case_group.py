
from typing import Sequence
from sqlalchemy import and_, asc, or_, select, insert, update, delete
from sqlalchemy.ext.asyncio import AsyncSession

from backend.app.crud.base import CRUDBase
from backend.app.models import CaseGroup
from backend.app.schemas.fuzz_test import UpdateGroup, CreateGroupSchema


class CRUDCaseGroup(CRUDBase[CaseGroup, CreateGroupSchema, UpdateGroup]):
    """
    增删改查模糊测试用例组。

    :param CRUDBase: CRUD基类。
    """
    async def get_group_by_id(self, db: AsyncSession, group_id: int) -> CaseGroup | None:
        """Get a case group by its id.

        Args:
            db (AsyncSession): The database session.
            group_id (int): The id of the group to retrieve.

        Returns:
            CaseGroup | None: The case group with the given id, or None if no group was found.
        """
        return await self.get_(db, pk=group_id)
    
    async def get_group(self, db: AsyncSession, user_id: int, group_name: str) -> CaseGroup | None:
        """Get a case group by its name.

        Args:
            db (AsyncSession): The database session.
            user_id (int): The id of the user who owns the group.
            group_name (str): The name of the group to retrieve.

        Returns:
            CaseGroup | None: The case group with the given name, or None if no group was found.
        """
        group = await db.execute(
            select(CaseGroup).where(CaseGroup.name == group_name and CaseGroup.user_id == user_id)
        )
        return group.scalars().first()
    
    # async def create_group(self, db: AsyncSession, user_id:int, name, desc=None) -> None:
    #     """
    #     创建一个名为name,描述为desc的模糊测试用例组

    #     :param db: _description_
    #     :param user_id: _description_
    #     :param create_group: 含有name和desc属性的CreateGroup对象
    #     """
    #     case_group = CaseGroup(user_id=user_id, name=name, desc=desc)
    #     db.add(case_group)

    async def create_group(self, db: AsyncSession, user_id, name, desc=None) -> None:
        """
        Create a new case group.

        Args:
            db (AsyncSession): The database session.
            obj (CreateGroup): The data for the new group.

        Returns:
            None: The new group has been added to the database.
        """
        case_group = CaseGroup(user_id=user_id, name=name, desc=desc)
        db.add(case_group)
        
    async def update_group(self, db: AsyncSession, old_name: str, new_name: str, new_desc: str = None) -> None:
        """
        将名为old_name,描述为old_desc的模糊测试用例组的名称和描述改为new_name和new_desc.

        :param db: _description_
        :param new_name: _description_
        :param new_desc: _description_, defaults to None
        """
        group = await db.execute(
            update(CaseGroup).where(CaseGroup.name == old_name).values(name=new_name, desc=new_desc)
        )
        return group.rowcount

    async def delete_group(self, db: AsyncSession, name: str) -> int:
        """Delete a case group with the given name.

        Args:
            db (AsyncSession): The database session.
            name (str): The name of the group to delete.

        Returns:
            int: The number of rows affected by the delete operation.
        """
        group = await db.execute(delete(CaseGroup).where(CaseGroup.name == name))
        db.commit()
        return group.rowcount
