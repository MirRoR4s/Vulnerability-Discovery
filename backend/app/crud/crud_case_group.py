
from typing import Sequence
from sqlalchemy import and_, asc, or_, select, insert, update, delete
from sqlalchemy.ext.asyncio import AsyncSession

from backend.app.crud.base import CRUDBase
from backend.app.models import CaseGroup
from backend.app.schemas.fuzz_test import UpdateGroupSchema, CreateGroupSchema


class CRUDCaseGroup(CRUDBase[CaseGroup, CreateGroupSchema, UpdateGroupSchema]):
    """
    增删改查模糊测试用例组。

    :param CRUDBase: CRUD基类。
    """
    async def get_group_by_id(self, db: AsyncSession, group_id: int) -> CaseGroup | None:
        """
        Get a case group by its ID.

        :param db: The database session.
        :param group_id: The ID of the case group.
        :return: The case group if found, otherwise None.
        """
        return await self.get_(db, primary_key=group_id)

    async def read_group(
            self, db: AsyncSession, user_id: int, group_name: str
        ) -> CaseGroup | None:
            """
            Get a case group by user ID and group name.

            :param db: The database session.
            :param user_id: The ID of the user.
            :param group_name: The name of the group.
            :return: The case group if found, otherwise None.
            """
            group = await db.execute(
                select(CaseGroup).where(
                    CaseGroup.name ==group_name and CaseGroup.user_id == user_id
                )
            )
            return group.scalars().first()

    async def create_group(self, db, user_id, name, desc=None):
        """
        Create a new case group.

        :param db: The database session.
        :param user_id: The ID of the user creating the group.
        :param name: The name of the group.
        :param desc: The description of the group (optional).
        """
        case_group = CaseGroup(user_id=user_id, name=name, desc=desc)
        db.add(case_group)

    async def update_group(
            self, db, user_id, old_name, new_name, new_desc=None
        ):
        """
        将名为old_name,描述为old_desc的模糊测试用例组的名称和描述改为new_name和new_desc.

        :param db: 数据库会话对象
        :param user_id: 用户ID
        :param old_name: 旧的组名称
        :param new_name: 新的组名称
        :param new_desc: 新的组描述，默认为None
        :return: 更新的行数
        """
        group = await db.execute(
            update(CaseGroup).where(
                CaseGroup.name == old_name and CaseGroup.user_id == user_id
            ).values(name=new_name, desc=new_desc)
        )
        return group.rowcount

    async def delete_group(self, db: AsyncSession, user_id: int, name: str) -> int:
        """
        Delete a group by user ID and name.

        :param db: The database session.
        :param user_id: The ID of the user.
        :param name: The name of the group.
        :return: The number of rows affected.
        """
        group = await db.execute(
            delete(CaseGroup).where( CaseGroup.user_id == user_id and CaseGroup.name == name)
        )
        db.commit()
        return group.rowcount

CASEGROUPDAO = CRUDCaseGroup(CaseGroup)
