from sqlalchemy import select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession

from backend.app.crud.base import CRUDBase
from backend.app.models import Case
from backend.app.schemas.fuzz_test_schema import UpdateCase, CreateCase


class CRUDCase(CRUDBase[Case, CreateCase, UpdateCase]):

    async def create_case(
        self, db: AsyncSession, group_id: int, name: str, desc: str = None
    ) -> None:
        """
        Create a new case.

        :param db: The database session.
        :param group_id: The ID of the group associated with the case.
        :param name: The name of the case.
        :param desc: The description of the case (optional).
        """
        case = Case(group_id=group_id, name=name, desc=desc)
        db.add(case)

    async def read_case(self, db: AsyncSession, group_id: int, case_name: str) -> Case | None:
        """
        Retrieve a case from the database.

        :param db: The database session.
        :param group_id: The ID of the group the case belongs to.
        :param case_name: The name of the case.
        :return: The case if found, otherwise None.
        """
        case = await db.execute(select(Case).where(
            Case.name == case_name and Case.group_id == group_id
        ))
        return case.scalars().first()

    async def update_case(
        self, db: AsyncSession, group_id: int, old_name: str, new_name: str, new_desc: str = None
    ) -> int:
        """
        Update a case in the database.

        :param db: The database session.
        :param group_id: The ID of the group to which the case belongs.
        :param old_name: The current name of the case.
        :param new_name: The new name for the case.
        :param new_desc: The new description for the case. Defaults to None.
        :return: The number of rows affected by the deletion.
        """
        row_count = await db.execute(
            update(Case).where(Case.name == old_name and Case.group_id == group_id)
            .values(name=new_name, desc=new_desc)
        )
        return row_count

    async def delete_case(self, db: AsyncSession, group_id:int, name: str) -> int:
        """
        Delete a case from the database.

        :param db: The database session.
        :param group_id: The ID of the group the case belongs to.
        :param name: The name of the case to be deleted.
        :return: The number of rows affected by the deletion.
        """
        row_count = await db.execute(delete(Case).where(
            Case.name == name and Case.group_id == group_id
        ))
        return row_count

CASEDAO = CRUDCase(Case)
