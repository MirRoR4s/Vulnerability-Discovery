
from typing import Sequence
from sqlalchemy import select, delete, update
from sqlalchemy.ext.asyncio import AsyncSession

from backend.app.crud.base import CRUDBase
from backend.app.models import Primitive
from backend.app.schemas.fuzz_test_schema import CreatePrimitive


class CRUDPrimitive(CRUDBase[Primitive, CreatePrimitive, CreatePrimitive]):


    async def create_primitive(self, db: AsyncSession, case_id: int, primitive: CreatePrimitive) -> None:
        """
        Create a new primitive.

        :param db: The database session.
        :param case_id: The ID of the case.
        :param primitive: The primitive data to be created.
        """
        primitive = Primitive(**primitive.model_dump(), case_id=case_id)
        db.add(primitive)

    async def read_primitive(self, db: AsyncSession, primitive_name: str) -> Primitive | None:
        """
        Read a primitive from the database.

        :param db: The database session.
        :param primitive_name: The name of the primitive.
        :return: The primitive object if found, otherwise None.
        """
        primitive = await db.execute(select(self.model).where(self.model.name == primitive_name))
        return primitive.scalars().first()

    async def update_primitive(
        self, db: AsyncSession, primitive_name, primitive: CreatePrimitive
    ) -> int:
        """
        Update a primitive in the database.

        :param db: The database session.
        :param primitive_name: The name of the primitive to update.
        :param primitive: The updated primitive data.
        """
        return await db.execute(
            update(self.model).where(self.model.name == primitive_name).values(**primitive.model_dump())
        )

    async def delete_primitive(self, db: AsyncSession, primitive_name: str) -> int:
        """
        Delete a primitive from the database.

        :param db: The database session.
        :param primitive_name: The name of the primitive to delete.
        :return: The number of rows affected by the deletion.
        """
        return await db.execute(delete(self.model).where(self.model.name == primitive_name))
