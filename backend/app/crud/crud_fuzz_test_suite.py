from typing import Sequence
from sqlalchemy import and_, asc, or_, select, insert, update, delete
from sqlalchemy.ext.asyncio import AsyncSession

from crud.base import CRUDBase
from models import FuzzTestSuite

from schemas.fuzz_test_schema import UpdateSuiteSchema, SuiteSchema


class CRUDFuzzTestSuite(CRUDBase[FuzzTestSuite, SuiteSchema, UpdateSuiteSchema]):
    """
    增删改查模糊测试用例组。

    :param CRUDBase: CRUD基类。
    """
    # async def get_group_by_id(self, db: AsyncSession, group_id: int) -> CaseGroup | None:
    #     """
    #     Get a case group by its ID.

    #     :param db: The database session.
    #     :param group_id: The ID of the case group.
    #     :return: The case group if found, otherwise None.
    #     """
    #     return await self.get_(db, primary_key=group_id)

    async def read_suite(
            self, db: AsyncSession, user_id: int, suite_name: str
        ) -> FuzzTestSuite | None:
            suite = await db.execute(
                select(FuzzTestSuite).where(
                    FuzzTestSuite.name == suite_name and FuzzTestSuite.user_id == user_id
                )
            )
            return suite.scalars().first()
    
    async def read_user_suites(self, db: AsyncSession, user_id) -> Sequence[FuzzTestSuite]:
        groups = await db.execute(
            select(FuzzTestSuite).where(FuzzTestSuite.user_id == user_id).order_by(asc(FuzzTestSuite.id))
        )
        return groups.scalars().all()
        
    async def read_system_suites(self, db: AsyncSession) -> Sequence[FuzzTestSuite]:
        groups = await db.execute(
                select(FuzzTestSuite).where(FuzzTestSuite.is_system == True).order_by(asc(FuzzTestSuite.id))
            )
        return groups.scalars().all()

    async def create_suite(
        self, db, user_id, name, desc=None, is_user_saved=False, cases_name: list | None = None, is_system=False
        ):
        suite = FuzzTestSuite(
            user_id=user_id, name=name, description=desc, is_user_saved=is_user_saved, cases_name=cases_name, is_system=is_system
        )
        db.add(suite)
    
    async def update_suite(
            self, db, user_id, old_name, new_name, new_desc=None
        ):
        group = await db.execute(
            update(FuzzTestSuite).where(
                FuzzTestSuite.name == old_name and FuzzTestSuite.user_id == user_id
            ).values(name=new_name, desc=new_desc)
        )
        return group.rowcount

    async def delete_suite(self, db: AsyncSession, user_id: int, name: str) -> int:
        group = await db.execute(
            delete(FuzzTestSuite).where( FuzzTestSuite.user_id == user_id and FuzzTestSuite.name == name)
        )
        db.commit()
        return group.rowcount

FUZZTESTSUITEDAO = CRUDFuzzTestSuite(FuzzTestSuite)
