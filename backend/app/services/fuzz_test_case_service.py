from fastapi import Request

from backend.app.schemas.fuzz_test_schema import CreateCase, UpdateCase
from backend.app.common.exception import errors
from backend.app.services.fuzz_test_group_service import FuzzTestGroupService
from backend.app.crud.crud_case import CASEDAO
from backend.app.crud.crud_case_group import CASEGROUPDAO
from backend.app.models import Case
from backend.app.database.db_mysql import async_db_session



class FuzzTestCaseService:
    """
    Service class for managing fuzz test cases.
    """
    @staticmethod
    async def create_case(request: Request, group_name:str, case: CreateCase) -> None:
        """
        Create a new case.

        :param request: The request.
        :param case: The case to create.
        """
        # 获取用户ID
        user_id = request.user.id
        async with async_db_session.begin() as db:
            # 从用户ID获取组名
            group = await CASEGROUPDAO.read_group(
                db, user_id, group_name
            )
            # 如果组不存在，抛出异常
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            await CASEDAO.create_case(db, group.id, case.name, case.desc)
        
    @staticmethod
    async def read_case(request: Request, group_name: str, case_name: str) -> Case:
        """
        Read a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case_name: The name of the case.
        :return: The case.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            case = await CASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            return case

    @staticmethod
    async def update_case(request: Request, group_name: str, case: UpdateCase) -> int:
        """
        Update a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case: The updated case.
        :return: The number of affected rows in the database.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            row_count = await CASEDAO.update_case(
                db, group.id, case.name, case.new_name, case.new_desc
            )
            return row_count

    @staticmethod
    async def delete_case(request: Request, group_name: str, case_name: str) -> int:
        """
        Delete a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case_name: The name of the case to be deleted.
        :return: The number of deleted cases.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            row_count = await CASEDAO.delete_case(db, group.id, case_name)
            return row_count