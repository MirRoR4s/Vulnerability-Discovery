from fastapi import Request

from backend.app.schemas.fuzz_test_schema import CaseSchema, UpdateCaseSchema
from backend.app.common.exception import errors
from backend.app.crud.crud_fuzz_test_case import FUZZTESTCASEDAO
from backend.app.crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from backend.app.crud.crud_fuzz_test_field import FUZZTESTFIELDDAO
from backend.app.models import FuzzTestCase
from backend.app.database.db_mysql import async_db_session



class FuzzTestCaseService:
    """
    Service class for managing fuzz test cases.
    """
    @staticmethod
    async def create_case(request, case_schema: CaseSchema):
        """
        Create a fuzz test case.

        :param request: The fuzz test case request.
        :param case_schema: The case schema.
        :raises errors.NotFoundError: If the user or case group is not found.
        """
        # 获取用户ID
        user_id = request.user.id
        async with async_db_session.begin() as db:
            # 从用户ID获取组名
            group = await FUZZTESTSUITEDAO.read_suite(
                db, user_id, case_schema.suite_name
            )
            # 如果组不存在，抛出异常
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            # 判断用例是否存在
            case = await FUZZTESTCASEDAO.read_case(db, group.id, case_schema.name)
            if case:
                raise errors.NotFoundError(msg="用例已存在")
            await FUZZTESTCASEDAO.create_case(db, group.id, case_schema.name, case_schema.desc)
        
    @staticmethod
    async def read_case(request: Request, suite_name: str, case_name: str) -> CaseSchema:
            """
            读取一个用例。

            :param request: 请求对象。
            :param suite_name: 用例所属的套件名称。
            :param case_name: 用例名称。
            :return: 用例对象。
            """
            user_id = request.user.id
            async with async_db_session.begin() as db:
                suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
                if not suite:
                    raise errors.NotFoundError(msg="套件不存在")
                case = await FUZZTESTCASEDAO.read_case(db, case_name, suite.id)
                if not case:
                    raise errors.NotFoundError(msg="用例不存在")
                return case
    
    @staticmethod
    async def read_cases(request: Request, suite_name) -> list[FuzzTestCase]:
        """
        Read all cases in a suite.

        :param request: The request.
        :param suite_name: The name of the suite to which the case belongs.
        :return: A list of cases.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not suite:
                raise errors.NotFoundError(msg="套件不存在")
            cases = await FUZZTESTCASEDAO.read_cases(db, suite.id)
            return cases

    @staticmethod
    async def update_case(request: CaseSchema, group_name: str, case: UpdateCaseSchema) -> int:
        """
        Update a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case: The updated case.
        :return: The number of affected rows in the database.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            row_count = await FUZZTESTCASEDAO.update_case(
                db, group.id, case.name, case.new_name, case.new_desc
            )
            return row_count

    @staticmethod
    async def delete_case(request: CaseSchema, suite_name: str, case_name: str) -> int:
        """
        Delete a case.

        :param request: The request.
        :param group_name: The name of the group to which the case belongs.
        :param case_name: The name of the case to be deleted.
        :return: The number of deleted cases.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not group:
                raise errors.NotFoundError(msg="用例组不存在")
            
            case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            await FUZZTESTFIELDDAO.delete_field_by_case_id(db, case.id)
            result = await FUZZTESTCASEDAO.delete_case(db, group.id, case_name)
            return result.rowcount