from fastapi import Request

from backend.app.common.exception import errors
from backend.app.database.db_mysql import async_db_session
from backend.app.crud.crud_case_group import CASEGROUPDAO
from backend.app.models.sys_case_group import CaseGroup
from backend.app.schemas.fuzz_test import CreateGroupSchema, UpdateGroupSchema


class FuzzTestGroupService:
    """
    Service class for managing fuzz test groups.
    """
    @staticmethod
    async def create_group(request: Request, group: CreateGroupSchema) -> None:
        """
        Create a new group for fuzz testing.

        :param user_id: The ID of the user creating the group.
        :param group_name: The name of the group.
        :param desc: The description of the group, defaults to None.
        :raises errors.ForbiddenError: If the group already exists.
        """
        user_id = request.user.id
        name, desc = group.name, group.desc
        async with async_db_session.begin() as db:
            group = await CASEGROUPDAO.read_group(db, user_id, name)
            if group:
                raise errors.ForbiddenError(msg="用例组已存在")
            await CASEGROUPDAO.create_group(db, user_id, name, desc)

    @staticmethod
    async def read_group(request: Request, group_name: str) -> CaseGroup:
        """
        Read a group.

        :param user_id: The ID of the user reading the group.
        :param group_name: The name of the group.
        :return: The group.
        :raises errors.ForbiddenError: If the group does not exist.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return group

    @staticmethod
    async def update_group(request: Request, update_group: UpdateGroupSchema) -> int:
        """
        Update the group with the provided information.

        :param request: The request object.
        :param update_group: The schema containing the updated group information.
        :raises errors.ForbiddenError: If the group does not exist.
        :return: The number of affected rows in the database.
        """
        user_id = request.user.id
        old_name, new_name, new_desc = (
            update_group.name, update_group.new_name, update_group.new_desc
        )
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.read_group(db, user_id, old_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return await CASEGROUPDAO.update_group(db, user_id, old_name, new_name, new_desc)

    @staticmethod
    async def delete_group(request, group_name):
        """
        Delete a group.

        :param request: The request object.
        :param group_name: The name of the group to be deleted.
        :raises errors.ForbiddenError: If the group does not exist.
        :return: The number of deleted groups.
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return await CASEGROUPDAO.delete_group(db, user_id, group_name)
