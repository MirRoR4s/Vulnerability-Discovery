#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from fastapi import Request

from backend.app.common.exception import errors
from backend.app.database.db_mysql import async_db_session
from backend.app.crud.crud_case_group import CRUDCaseGroup
from backend.app.models.sys_case_group import CaseGroup
from backend.app.schemas.fuzz_test import CreateGroupSchema, UpdateGroupSchema

CASEGROUPDAO = CRUDCaseGroup(CaseGroup)

class FuzzTestGroupService:

    @staticmethod
    async def create_group(request: Request, group: CreateGroupSchema) -> None:
        """
        Create a new group for fuzz testing.

        :param user_id: The ID of the user creating the group.
        :param group_name: The name of the group.
        :param desc: The description of the group, defaults to None.
        :raises errors.ForbiddenError: If the group already exists.
        """
        user_id = request.user.id
        name, desc = group.name, group.desc
        async with async_db_session.begin() as db:
            group = await CASEGROUPDAO.get_group(db, user_id, name)
            if group:
                raise errors.ForbiddenError(msg="用例组已存在")
            await CASEGROUPDAO.create_group(db, user_id, name, desc)
    
    @staticmethod
    async def read_group(user_id: int, group_name: str) -> CaseGroup:
        """
        Read a group.

        :param user_id: The ID of the user reading the group.
        :param group_name: The name of the group.
        :return: The group.
        :raises errors.ForbiddenError: If the group does not exist.
        """
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, group_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return group
    
    @staticmethod
    async def update_group(request: Request, update_group: UpdateGroupSchema) -> None:
        user_id = request.user.id
        old_name, new_name, new_desc = update_group.name, update_group.new_name, update_group.new_desc
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, old_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            await CASEGROUPDAO.update_group(db, user_id, old_name, new_name, new_desc)
    
    @staticmethod
    async def delete_group(request: Request, group_name: str) -> None:
        """
        
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, group_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            await CASEGROUPDAO.delete_group(db, user_id, group_name)
