#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from backend.app.common.exception import errors
from backend.app.database.db_mysql import async_db_session
from backend.app.crud.crud_case_group import CRUDCaseGroup
from backend.app.models.sys_case_group import CaseGroup

CASEGROUPDAO = CRUDCaseGroup(CaseGroup)

class FuzzTestGroupService:

    @staticmethod
    async def create_group(user_id: int, group_name: str, desc: str = None) -> None:
        """
        Create a new group for fuzz testing.

        :param user_id: The ID of the user creating the group.
        :param group_name: The name of the group.
        :param desc: The description of the group, defaults to None.
        :raises errors.ForbiddenError: If the group already exists.
        """
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, group_name)
            if group:
                raise errors.ForbiddenError(msg="用例组已存在")
            await CASEGROUPDAO.create_group(db, user_id, group_name, desc)
    
    @staticmethod
    async def read_group(user_id: int, group_name: str) -> CaseGroup:
        """
        Read a group.

        :param user_id: The ID of the user reading the group.
        :param group_name: The name of the group.
        :return: The group.
        :raises errors.ForbiddenError: If the group does not exist.
        """
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, group_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return group
    
    @staticmethod
    async def update_group(user_id: int, old_name: str, new_name: str, new_desc: str = None) -> None:
        """
        Update the name and description of a group.

        :param user_id: The ID of the user updating the group.
        :param old_name: The old name of the group.
        :param new_name: The new name of the group.
        :param new_desc: The new description of the group, defaults to None.
        :raises errors.ForbiddenError: If the group does not exist.
        """
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, old_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            await CASEGROUPDAO.update_group(db, user_id, old_name, new_name, new_desc)
    
    @staticmethod
    async def delete_group(user_id: int, group_name: str) -> None:
        """
        Delete a group.

        :param user_id: The ID of the user deleting the group.
        :param group_name: The name of the group.
        :raises errors.ForbiddenError: If the group does not exist.
        """
        async with async_db_session.begin() as db:
            group = CASEGROUPDAO.get_group(db, user_id, group_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            await CASEGROUPDAO.delete_group(db, user_id, group_name)
