from fastapi import Request

from backend.app.schemas.fuzz_test_schema import PrimitiveSchema
from backend.app.database.db_mysql import async_db_session
from backend.app.crud.crud_case_group import CASEGROUPDAO
from backend.app.crud.crud_primitive import PRIMITIVEDAO
from backend.app.crud.crud_case import CASEDAO
from backend.app.models import Primitive
from backend.app.common.exception import errors

class FuzzTestPrimitiveService:
    
    @staticmethod
    async def create_primitive(
        request: Request, group_name, case_name, primitive_type, primitive_schema: PrimitiveSchema
        ):
        """
        Create a fuzz test primitive.
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await CASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            # 判断原语是否存在
            primitive = await PRIMITIVEDAO.read_primitive(db, case.id, primitive_schema.name)
            if primitive:
                raise errors.NotFoundError(msg="原语已存在")
            await PRIMITIVEDAO.create_primitive(db, case.id, primitive_type, primitive_schema)
    
    @staticmethod
    async def create_variable(request: Request, group_name, case_name, variable_name):
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await CASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            # 判断变量是否存在
            variable = await PRIMITIVEDAO.read_variable(db, case.id, variable_name)
            if variable:
                raise errors.NotFoundError(msg="变量已存在")
            await PRIMITIVEDAO.create_variable(db, case.id, variable_name)
    
    @staticmethod
    async def read_primitive(request: Request, group_name, case_name, primitive_name) -> Primitive:
        """
        Read a fuzz test primitive.
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await CASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            primitive = await PRIMITIVEDAO.read_primitive(db, case.id, primitive_name)
            if not primitive:
                raise errors.NotFoundError(msg="原语不存在")
            return primitive
    
    @staticmethod
    async def update_primitive(request: Request, group_name, case_name, primitive: PrimitiveSchema) -> int:
        """
        Update a fuzz test primitive.
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await CASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            primitive_name = primitive.name
            count = await PRIMITIVEDAO.update_primitive(db, case.id, primitive_name, primitive)
            return count
        
    
    @staticmethod
    async def delete_primitive(request: Request, group_name, case_name, primitive_name) -> int:
        """
        Delete a fuzz test primitive.
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await CASEGROUPDAO.read_group(db, user_id, group_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await CASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            count = await PRIMITIVEDAO.delete_primitive(db, case.id, primitive_name)
            return count