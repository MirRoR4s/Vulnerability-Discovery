from fastapi import Request


from backend.app.database.db_mysql import async_db_session
from backend.app.crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from backend.app.crud.crud_fuzz_test_field import FUZZTESTFIELDDAO
from backend.app.crud.crud_fuzz_test_case import FUZZTESTCASEDAO

from backend.app.common.exception import errors
from backend.app.schemas.fuzz_test_field_schema import FieldBaseSchema

class FuzzTestFieldService:
    
    @staticmethod
    async def create_field(request: Request, field: FieldBaseSchema):
        """
        创建一个模糊测试字段

        :param request: 包含用户id的请求对象
        :param field: 包含字段信息的请求体
        :raises errors.NotFoundError: 当字段所属的用例不存在或是用例所属的套件不存在时抛出
        :raises errors.ForbiddenError: 当字段已存在时抛出
        """
        async with async_db_session.begin() as db:
            user_id = request.user.id
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, field.suite_name)
            if not suite:
                raise errors.NotFoundError(msg="套件不存在")
            # 获取用例id            
            case = await FUZZTESTCASEDAO.read_case(db, field.case_name, suite.id)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            field = await FUZZTESTFIELDDAO.read_field(db, case.id, field.name)
            if field:
                raise errors.ForbiddenError(msg="字段已存在")
            await FUZZTESTFIELDDAO.create_field(db, case.id, dict(field))
    
    # @staticmethod
    # async def create_variable(request: Request, group_name, case_name, variable_name):
    #     async with async_db_session.begin() as db:
    #         # 获取用户id
    #         user_id = request.user.id
    #         # 获取用户所属的组id
    #         group = await CASEGROUPDAO.read_group(db, user_id, group_name)
    #         if not group:
    #             raise errors.NotFoundError(msg="用户没有所属的组")
    #         # 获取用例id            
    #         case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
    #         if not case:
    #             raise errors.NotFoundError(msg="用例不存在")
    #         # 判断变量是否存在
    #         variable = await FUZZTESTFIELDDAO.read_variable(db, case.id, variable_name)
    #         if variable:
    #             raise errors.NotFoundError(msg="变量已存在")
    #         await FUZZTESTFIELDDAO.create_variable(db, case.id, variable_name)
    
    # @staticmethod
    # async def read_primitive(request: Request, group_name, case_name, primitive_name) -> Primitive:
    #     """
    #     Read a fuzz test primitive.
    #     """
    #     async with async_db_session.begin() as db:
    #         # 获取用户id
    #         user_id = request.user.id
    #         # 获取用户所属的组id
    #         group = await CASEGROUPDAO.read_group(db, user_id, group_name)
    #         if not group:
    #             raise errors.NotFoundError(msg="用户没有所属的组")
    #         # 获取用例id            
    #         case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
    #         if not case:
    #             raise errors.NotFoundError(msg="用例不存在")
    #         primitive = await FUZZTESTFIELDDAO.read_field(db, case.id, primitive_name)
    #         if not primitive:
    #             raise errors.NotFoundError(msg="原语不存在")
    #         return primitive
    
    # @staticmethod
    # async def update_primitive(request: Request, group_name, case_name, primitive: PrimitiveSchema) -> int:
    #     """
    #     Update a fuzz test primitive.
    #     """
    #     async with async_db_session.begin() as db:
    #         # 获取用户id
    #         user_id = request.user.id
    #         # 获取用户所属的组id
    #         group = await CASEGROUPDAO.read_group(db, user_id, group_name)
    #         if not group:
    #             raise errors.NotFoundError(msg="用户没有所属的组")
    #         # 获取用例id            
    #         case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
    #         if not case:
    #             raise errors.NotFoundError(msg="用例不存在")
    #         primitive_name = primitive.name
    #         count = await FUZZTESTFIELDDAO.update_field(db, case.id, primitive_name, primitive)
    #         return count
        
    
    @staticmethod
    async def delete_field(request: Request, suite_name, case_name, field_name) -> int:
        """
        删除一个模糊测试字段

        :param request: 包含用户id的请求对象
        :param group_name: 包含用例的套件名称
        :param case_name: 包含字段的用例名称
        :param field_name: 字段名称
        :raises errors.NotFoundError: 当字段所属的用例不存在或是用例所属的套件不存在时抛出
        :return: 被删除的字段数
        """
        async with async_db_session.begin() as db:
            # 获取用户id
            user_id = request.user.id
            # 获取用户所属的组id
            group = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not group:
                raise errors.NotFoundError(msg="用户没有所属的组")
            # 获取用例id            
            case = await FUZZTESTCASEDAO.read_case(db, group.id, case_name)
            if not case:
                raise errors.NotFoundError(msg="用例不存在")
            count = await FUZZTESTFIELDDAO.delete_field(db, case.id, field_name)
            return count