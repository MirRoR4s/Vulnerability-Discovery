from fastapi import Request
from backend.app.crud.crud_fuzz_test_suite import FUZZTESTSUITEDAO
from backend.app.crud.crud_fuzz_test_case import FUZZTESTCASEDAO
from backend.app.database.db_mysql import async_db_session
from backend.app.schemas.fuzz_test_schema import SuiteSchema, SuiteTemplateSchema, UpdateSuiteSchema
from backend.app.services.fuzz_test_case_service import FuzzTestCaseService
from backend.app.models.fuzz_test_suite import FuzzTestSuite
from backend.app.common.exception import errors


class FuzzTestSuiteService:
    """
    Service for handling fuzz test settings
    
    1. 读取用例库下所有用例组,包括用户的和系统内置的
    2. 读取用例库下某用例组的所有用例(传入用例库的名称)
    3. 向测试套件模板库添加测试套件集合(传入测试套件集合的名称和描述以及该集合下所有测试用例的名称)
    4. 读取测试套件模板库的所有模板 (传入测试套件模板库的名称)
    5. 读取模板下的所有测试用例 
    6. 编辑模板下某个测试用例
    """
    @staticmethod
    async def read_all_suites(request: Request) -> list:
        """
        Read all suites

        :param request: The request.
        :return: A list of FuzzTestSuite Object
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            system_suites = await FUZZTESTSUITEDAO.read_system_suites(db)
            user_suites = await FUZZTESTSUITEDAO.read_user_suites(db, user_id)
            suites = system_suites + user_suites
            return suites
        
    @staticmethod
    async def read_suite(request, suite_name):
            """
            Read a fuzz test suite.

            :param request: The request object that contains the user's id.
            :param suite_name: The name of the suite.
            :raises errors.ForbiddenError: If the suite does not exist.
            :return: The fuzz test suite.
            """
            user_id = request.user.id
            async with async_db_session.begin() as db:
                suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
                if not suite:
                    raise errors.ForbiddenError(msg="套件不存在")
                return suite
            
    @staticmethod
    async def create_suite(
        request: Request, suite_schema: SuiteTemplateSchema | SuiteSchema, is_template: bool = False
        ) -> None:
        """
        Add a suite to the fuzz test settings.

        :param request: The request object.
        :param suite_schema: 
        :param is_template: A flag indicating whether the suite is a template.
        """
        user_id = request.user.id
        is_user_saved = False
        cases_name = None
        async with async_db_session.begin() as db:
            # 查询该用户下是否已经存在同名的测试套件
            suite = await FUZZTESTSUITEDAO.read_suite(db, user_id, suite_schema.name)
            if suite:
                raise errors.ForbiddenError(msg="套件已存在")
            suite_name = suite_schema.name
            suite_desc = suite_schema.desc
            if is_template:
                # 查询测试用例是否存在
                for case_name in suite_schema.cases_name:
                    case = await FUZZTESTCASEDAO.read_case(db, case_name)
                    if not case:
                        raise errors.ForbiddenError(msg=f"用例 {case_name} 不存在")
                cases_name = suite_schema.cases_name
                is_user_saved = True
            # 注意该套件不是系统内置的套件
            is_system = False
            await FUZZTESTSUITEDAO.create_suite(db, user_id, suite_name, suite_desc, is_user_saved, cases_name, is_system)
            
    @staticmethod
    async def update_suite(request: Request, update_suite_schema: UpdateSuiteSchema) -> int:
        """

        """
        user_id = request.user.id
        old_name, new_name, new_desc = (
            update_suite_schema.name, update_suite_schema.new_name, update_suite_schema.new_desc
        )
        async with async_db_session.begin() as db:
            group = FUZZTESTSUITEDAO.read_suite(db, user_id, old_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return await FUZZTESTSUITEDAO.update_suite(db, user_id, old_name, new_name, new_desc)

    @staticmethod
    async def delete_suite(request, suite_name):
        """
        删除名为suite_name的测试套件

        :param request: _description_
        :param suite_name: _description_
        :raises errors.ForbiddenError: _description_
        :return: _description_
        """
        user_id = request.user.id
        async with async_db_session.begin() as db:
            group = FUZZTESTSUITEDAO.read_suite(db, user_id, suite_name)
            if not group:
                raise errors.ForbiddenError(msg="用例组不存在")
            return await FUZZTESTSUITEDAO.delete_suite(db, user_id, suite_name)