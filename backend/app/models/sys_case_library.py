#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Union

from sqlalchemy import ForeignKey, String
from sqlalchemy.orm import Mapped, mapped_column, relationship


from backend.app.models.base import Base, id_key


class CaseGroup(Base):
    """
    模糊测试用例组表，包含 id、name、desc、user_id 列。注意一个用例组包含多个用例。
    同时为了根据用户 id 和用例组名称唯一定位到一个用例组，以这两列为基础定义了一个唯一性约束。
    """
    __tablename__ = "sys_case_group"
    
    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), comment="用例组名称")
    desc: Mapped[str] = mapped_column(String(100), comment="用例组描述")
    
    user_id: Mapped[int | None] = mapped_column(
        ForeignKey("sys_user.id", ondelete="SET NULL"), default=None, comment="用例组所属用户的id"
    )
    user: Mapped[Union['User', None]] = relationship(init=False, back_populates='groups')
    cases: Mapped[list['Case']] = relationship(init=False, back_populates='group')
    

class SystemCaseGroup(Base):
    """
    系统模糊测试用例组表
    """
    __tablename__ = "sys_built_in_case_group"
    
    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), comment="用例组名称")
    desc: Mapped[str] = mapped_column(String(100), comment="用例组描述")
    cases: Mapped[list['Case']] = relationship(init=False, back_populates='system_group')