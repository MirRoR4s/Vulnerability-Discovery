#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Union

from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, JSON, UniqueConstraint
from backend.app.models.base import Base, id_key

class Block(Base):
    """
    Boofuzz Block, see https://boofuzz.readthedocs.io/en/stable/user/protocol-definition.html#blocks
    """
    
    __tablename__ = 'sys_block'
    id: Mapped[id_key] = mapped_column(init=False)
    
    name: Mapped[str | None] = mapped_column(String(50), index=True, default=None, comment='Block 名称')
    default_value: Mapped[str | None] = mapped_column(String(100), default=None, comment="Block 默认值")
    # 相当于 request
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='简单数据所属用例ID'
    )
    group_name: Mapped[str | None] = mapped_column(String(50), default=None, comment='原语组名称')
    # 砍掉 encoder
    dep: Mapped[str | None] = mapped_column(String(50), default=None, comment='依赖')
    dep_values: Mapped[bytes | None] = mapped_column(JSON, default=None, comment='依赖值')
    dep_compare: Mapped[str | None] = mapped_column(String(50), default=None, comment='依赖比较')

    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='blocks')
    
    # 用例原语一对多
    statics: Mapped[list['StaticPrimitive']] = relationship(init=False, back_populates="block")
    simples: Mapped[list['SimplePrimitive']] = relationship(init=False, back_populates="block")
    bytes: Mapped[list['BytePrimitive']] = relationship(init=False, back_populates="block")
    delims: Mapped[list['DelimPrimitive']] = relationship(init=False, back_populates="block")
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)
    
class StaticPrimitive(Base):
    """
    静态表，用于存储静态数据。静态数据是指不会随着时间、环境等因素而变化的数据。
    """
    __tablename__ = 'sys_static'

    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), index=True, comment='静态数据名称')
    default_value: Mapped[str | None] = mapped_column(String(50), default=None, comment='静态数据值')
    
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='静态数据所属用例ID'
    )
    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='statics')
    
    block_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_block.id', ondelete='SET NULL'), default=None, comment='静态数据所属 Block ID'
    )
    block: Mapped[Union['Block', None]] = relationship(init=False, back_populates='statics')
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)
    
    
class SimplePrimitive(Base):
    """
    简单表，用于存储简单数据。简单数据是指不会随着时间、环境等因素而变化的数据。
    """
    __tablename__ = 'sys_simple'

    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), index=True, comment='简单数据名称')
    default_value: Mapped[str | None] = mapped_column(String(50), default=None, comment='简单数据值')
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='简单数据所属用例ID'
    )
    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='simples')
    
    block_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_block.id', ondelete='SET NULL'), default=None, comment='简单数据所属 Block ID'
    )
    block: Mapped[Union['Block', None]] = relationship(init=False, back_populates='simples')
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)
    
class DelimPrimitive(Base):
    __tablename__ = 'sys_delim'
    
    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), index=True, comment='分隔符名称')
    default_value: Mapped[str] = mapped_column(String(50), default='', comment='分隔符值')
    fuzzable: Mapped[bool] = mapped_column(Boolean, default=True, comment='是否可模糊测试')
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='简单数据所属用例ID'
    )
    block_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_block.id', ondelete='SET NULL'), default=None, comment='简单数据所属 Block ID'
    )
    
    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='delims')
    block: Mapped[Union['Block', None]] = relationship(init=False, back_populates='delims')
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)

class BytePrimitive(Base):
    """
    字节表，用于存储字节数据。字节数据是指不会随着时间、环境等因素而变化的数据。
    """
    __tablename__ = 'sys_byte'

    id: Mapped[id_key] = mapped_column(init=False)
    ###########################################################################################################
    name: Mapped[str | None] = mapped_column(String(50), index=True, default=None, comment='字节数据名称')
    default_value: Mapped[int] = mapped_column(Integer, default=0, comment='字节数据值')
    max_num: Mapped[int | None] = mapped_column(Integer, default=None, comment='最大值')
    endian: Mapped[str] = mapped_column(String(2), default='<', comment='大小端')
    output_format: Mapped[str] = mapped_column(String(50), default='binary', comment='输出格式')
    signed: Mapped[bool] = mapped_column(Boolean, default=False, comment='是否有符号')
    full_range: Mapped[bool] = mapped_column(Boolean, default=False, comment='是否全范围')
    fuzz_values: Mapped[list | None] = mapped_column(JSON, default=None, comment='模糊测试值字典')
    fuzzable: Mapped[bool] = mapped_column(Boolean, default=True, comment='是否可模糊测试')
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='字节数据所属用例ID'
    )
    block_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_block.id', ondelete='SET NULL'), default=None, comment='字节数据所属 Block ID'
    )
    ###########################################################################################################
    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='bytes')
    block: Mapped[Union['Block', None]] = relationship(init=False, back_populates='bytes')
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)
    


class Primitive(Base):
    """
    原语表，根据 type 字段区分不同的原语。关于各原语及其下辖字段，
    参见 https://boofuzz.readthedocs.io/en/stable/user/protocol-definition.html#primitives。
    """
    __tablename__ = 'sys_primitive'

    id: Mapped[id_key] = mapped_column(init=False)
    type: Mapped[str] = mapped_column(String(50), comment='原语类型')
    name: Mapped[str] = mapped_column(String(50), index=True, comment='原语名称')
    default_value: Mapped[int] = mapped_column(default=0, comment="原语默认值")

    # 部门用户一对多
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='原语所属用例ID'
    )
    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='primitives')
    
    fuzzable: Mapped[bool] = mapped_column(Boolean, default=True, comment='是否可模糊测试')
    # Simple, BitField, Byte, Word, DWord, QWord
    fuzz_values: Mapped[list | None] = mapped_column(JSON, default=None, comment='模糊测试值字典')
    
    # RandomData
    min_length: Mapped[int | None] = mapped_column(Integer, default=None, comment='最小长度')
    max_length: Mapped[int | None] = mapped_column(Integer, default=None, comment='最大长度')
    max_mutations: Mapped[int | None] = mapped_column(Integer, default=None, comment='最大变异次数')
    step: Mapped[int | None] = mapped_column(Integer, default=None, comment='步长')
    
    # String, Bytes
    size: Mapped[int | None] = mapped_column(Integer, default=None, comment='大小')
    padding: Mapped[str | None] = mapped_column(String(50), default=None, comment='填充')
    
    # String
    encoding: Mapped[str | None] = mapped_column(String(50), default=None, comment='编码')

    # FromFile
    filename: Mapped[str | None] = mapped_column(String(50), default=None, comment='文件名')

    # Mirror
    primitive_name: Mapped[str | None] = mapped_column(String(50), default=None, comment='原语名称')
    # 此处剩余 request 字段未进行定义，
    
    # BitField
    width: Mapped[int | None] = mapped_column(Integer, default=None, comment='宽度')
    
    # BitField, Byte, Word, DWord, QWord
    max_num: Mapped[int | None] = mapped_column(Integer, default=None, comment='最大值')
    endian: Mapped[str | None] = mapped_column(String(50), default=None, comment='大小端')
    output_format: Mapped[str | None] = mapped_column(String(50), default=None, comment='输出格式')
    signed: Mapped[bool | None] = mapped_column(Boolean, default=None, comment='是否有符号')
    full_range: Mapped[bool | None] = mapped_column(Boolean, default=None, comment='是否全范围')

    # # Byte 字段可能是 Block 字段的子字段
    # block_id = Column(Integer, ForeignKey("block.id"), default=None)
    # block = relationship("Block", back_populates="primitive")
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)
