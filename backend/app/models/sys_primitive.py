#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Union

from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, JSON, UniqueConstraint
from backend.app.models.base import Base, id_key


class Primitive(Base):
    """
    原语表，根据 type 字段区分不同的原语。关于各原语及其下辖字段，
    参见 https://boofuzz.readthedocs.io/en/stable/user/protocol-definition.html#primitives。
    """
    __tablename__ = 'sys_primitive'

    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), index=True, comment='原语名称')
    default_value: Mapped[int] = mapped_column(default=0, comment="原语默认值")
    
    # 部门用户一对多
    case_id: Mapped[int | None] = mapped_column(
        ForeignKey('sys_case.id', ondelete='SET NULL'), default=None, comment='原语所属用例ID'
    )
    case: Mapped[Union['Case', None]] = relationship(init=False, back_populates='primitives')
    
        # Simple, BitField, Byte, Word, DWord, QWord
    fuzz_values = Column(JSON, nullable=True)
    
    # String, FromFile, Bytes
    max_len = Column(Integer, nullable=True)
    
    # Group
    values = Column(JSON, nullable=True)

    # RandomData
    min_length = Column(Integer, nullable=True)
    max_length = Column(Integer, nullable=True) 
    max_mutations = Column(Integer, nullable=True)
    step = Column(Integer, nullable=True)
    
    # String, Bytes
    size = Column(Integer, nullable=True)
    padding = Column(String, nullable=True)
    
    # String
    encoding = Column(String, nullable=True)

    # FromFile
    filename = Column(String, nullable=True)

    # Mirror
    primitive_name = Column(String, nullable=True)
    # 此处剩余 request 字段未进行定义，
    
    # BitField
    width = Column(Integer, nullable=True)
    
    # BitField, Byte, Word, DWord, QWord
    max_num = Column(Integer, nullable=True)
    endian = Column(String, nullable=True)
    output_format = Column(String, nullable=True)
    signed = Column(Boolean, nullable=True)
    full_range = Column(Boolean, nullable=True)

    # 外键是 Request id
    case_id = Column(Integer, ForeignKey("cases.id"))
    case = relationship("FuzzTestCase", back_populates="primitive")

    # Byte 字段可能是 Block 字段的子字段
    block_id = Column(Integer, ForeignKey("block.id"), nullable=True)
    block = relationship("Block", back_populates="primitive")
    
    __table_args__ = (UniqueConstraint('name', 'case_id'),)
