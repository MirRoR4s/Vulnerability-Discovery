#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Union

from sqlalchemy import ForeignKey, String
from sqlalchemy.orm import Mapped, mapped_column, relationship

from backend.app.models.base import Base, id_key


class Case(Base):
    """
    模糊测试用例表原型，包含 id、name、desc、group_id、suite_id 几列。
    注意一个模糊测试用例有且仅有一个 Request 对象
    为了通过用例名称和组 id 唯一定位一个模糊测试用例，用 name 和 group_id 定义了一个唯一性约束。
    """
    __tablename__ = "sys_case"
    id: Mapped[id_key] = mapped_column(init=False)
    name: Mapped[str] = mapped_column(String(50), comment="用例名称")
    desc: Mapped[str] = mapped_column(String(100), comment="用例描述")
    
    group_id: Mapped[int | None] = mapped_column(
        ForeignKey("sys_case_group.id", ondelete="SET NULL"), default=None, comment="用例所属用例组的id"
    )
    system_group_id:Mapped[int | None] = mapped_column(
        ForeignKey("sys_built_in_case_group.id", ondelete="SET NULL"), default=None, comment="用例所属系统用例组的id"
    )
    
    group: Mapped[Union['CaseGroup', None]] = relationship(init=False, back_populates='cases')
    system_group: Mapped[Union['SystemCaseGroup', None]] = relationship(init=False, back_populates='cases')
    
    # 用例原语一对多
    blocks: Mapped[list['Block']] = relationship(init=False, back_populates="case")
    primitives: Mapped[list['Primitive']] = relationship(init=False, back_populates="case")
    
    statics: Mapped[list['StaticPrimitive']] = relationship(init=False, back_populates="case")
    simples: Mapped[list['SimplePrimitive']] = relationship(init=False, back_populates="case")
    bytes: Mapped[list['BytePrimitive']] = relationship(init=False, back_populates="case")
    delims: Mapped[list['DelimPrimitive']] = relationship(init=False, back_populates="case")