import pytest
from fastapi.testclient import TestClient
import sys
sys.path.append('../../../')
from backend.app.schemas.fuzz_test_schema import *
from backend.app.main import app


client = TestClient(app)

class TestCreateGroup:

    
    def test_add_group_success(token_headers):
        print(token_headers)
        group_data = {
            "name": "test group",
            "desc": "this is a test group"
        }
        client.post(
            "/api/v1/fuzz_test/add/group", json=group_data, headers=token_headers
        )


    

# @pytest.fixture
# def test_add_group_unauthorized(self):
#     group = CreateGroupSchema(name="test group", description="this is a test group")
#     response = self.app.post("/api/v1/fuzz_test/add/group", json=group)
#     assert response.status_code == 401
#     assert response.json() == {"code": 10001, "message": "Unauthorized"}


# def test_add_group_forbidden(self):
#     group = CreateGroupSchema(name="test group", description="this is a test group")
#     user_id = 2
#     response = self.app.post("/api/v1/fuzz_test/add/group", json=group, headers={"Authorization": f"Bearer {user_token}"})
#     assert response.status_code == 403
#     assert response.json() == {"code": 10003, "message": "Forbidden"}


# def test_add_group_bad_request(self):
#     response = self.app.post("/api/v1/fuzz_test/add/group")
#     assert response.status_code == 400
#     assert response.json() == {"code": 10002, "message": "Bad Request"}


# def test_add_group_validation_error(self):
#     group = CreateGroupSchema(name="", description="this is a test group")
#     user_id = 1
#     response = self.app.post("/api/v1/fuzz_test/add/group", json=group, headers={"Authorization": f"Bearer {user_token}"})
#     assert response.status_code == 422
#     assert response.json() == {"code": 10004, "message": "Validation Error", "errors": {"name": ["Field cannot be blank."]}}