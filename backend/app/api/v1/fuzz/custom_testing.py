#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Annotated

from fastapi import APIRouter, Body, Path, Request

from backend.app.schemas.fuzz_test_schema import (
    CreateGroupSchema, UpdateGroupSchema, CreateCase, UpdateCase, PrimitiveSchema
)
from backend.app.common.jwt import DependsJwtAuth
from backend.app.common.rbac import DependsRBAC
from backend.app.common.response.response_code import CustomResponseCode
from backend.app.common.response.response_schema import response_base
from backend.app.services.fuzz_test_group_service import FuzzTestGroupService
from backend.app.services.fuzz_test_case_service import FuzzTestCaseService
from backend.app.services.fuzz_test_primitive_service import FuzzTestPrimitiveService
from backend.app.utils.serializers import select_as_dict

router = APIRouter()

###################################################################################################################################

# 新建模糊测试用例/组 原语
@router.post('/add/group', summary='新建模糊测试用例组', dependencies=[DependsJwtAuth])
async def add_group(request: Request, group: CreateGroupSchema):
    await FuzzTestGroupService.create_group(request, group)
    return await response_base.success()

@router.post('/add/case', summary='新建模糊测试用例', dependencies=[DependsJwtAuth])
async def add_case(request: Request, group_name: str, case: CreateCase):
    await FuzzTestCaseService.create_case(request, group_name, case)
    return await response_base.success()

@router.post('/add/primitive', summary='新建原语', dependencies=[DependsJwtAuth])
async def add_primitive(
    request: Request, group_name: str, case_name: str, primitive_type:str, primitive: PrimitiveSchema
    ):
    await FuzzTestPrimitiveService.create_primitive(request, group_name, case_name, primitive_type, primitive)
    return await response_base.success()

@router.post('/add/variable', summary='新建变量', dependencies=[DependsJwtAuth])
async def add_variable(request: Request, group_name: str, case_name: str, variable_name):
    pass


# #####################################################################################################################3

# 删除 模糊测试用例组 用例 原语 
@router.delete('/delete/group', summary='删除模糊测试用例组', dependencies=[DependsJwtAuth])
async def delete_case_group(request: Request, group: CreateGroupSchema):
    await FuzzTestGroupService.delete_group(request, group.name)
    return await response_base.success()

@router.delete('/delete/case', summary='删除模糊测试用例', dependencies=[DependsJwtAuth])
async def delete_case(request: Request, group_name: str, case_name: str):
    count = await FuzzTestCaseService.delete_case(request, group_name, case_name)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="删除失败,请检查用例是否存在")

@router.delete('/delete/primitive', summary='删除原语', dependencies=[DependsJwtAuth])
async def delete_primitive(request: Request, group_name: str, case_name: str, primitive_name: str):
    row_count = await FuzzTestPrimitiveService.delete_primitive(request, group_name, case_name, primitive_name)
    if row_count > 0:
        return await response_base.success()
    return await response_base.fail(data="删除失败,请检查原语是否存在")

####################################################################################################################################

@router.get('read/group', summary='读取模糊测试用例组', dependencies=[DependsJwtAuth])
async def read_group(request: Request, group_name: str):
    group = await FuzzTestGroupService.read_group(request, group_name)
    group_data =  await select_as_dict(group)
    return await response_base.success(data=group_data)

@router.get('/read/case', summary="读取模糊测试用例", dependencies=[DependsJwtAuth])
async def read_case(request: Request, group_name: str, case_name: str):
    case = await FuzzTestCaseService.read_case(request, group_name, case_name)
    case_data = await select_as_dict(case)
    return await response_base.success(data=case_data)

@router.get('/read/primitive', summary="读取原语", dependencies=[DependsJwtAuth])
async def read_primitive(request: Request, group_name: str = "string", case_name: str = "string", primitive_name: str = "string"):
    
    primitive = await FuzzTestPrimitiveService.read_primitive(request, group_name, case_name, primitive_name)
    primitive_data = await select_as_dict(primitive)
    return await response_base.success(data=primitive_data, exclude={'filename'})

######################################################################################################################################

@router.put('/update/group', summary='更新模糊测试用例组', dependencies=[DependsJwtAuth])
async def update_group(request: Request, group: UpdateGroupSchema):
    count = await FuzzTestGroupService.update_group(request, group)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查组是否存在")

@router.put('/update/case', summary='更新模糊测试用例', dependencies=[DependsJwtAuth])
async def update_case(request: Request, group_name: str, case: UpdateCase):
    count = await FuzzTestCaseService.update_case(request, group_name, case)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查用例是否存在")

@router.put('/update/prmitive', summary='更新原语', dependencies=[DependsJwtAuth])
async def update_primitive(request: Request, group_name: str, case_name: str, primitive: PrimitiveSchema):
    count = await FuzzTestPrimitiveService.update_primitive(request, group_name, case_name, primitive)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查原语是否存在")

######################################################################################################################################

