#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Annotated

from fastapi import APIRouter, Body, Path, Request

from backend.app.common.jwt import DependsJwtAuth
from backend.app.common.rbac import DependsRBAC
from backend.app.common.response.response_code import CustomResponseCode
from backend.app.common.response.response_schema import response_base
from backend.app.services.fuzz_test_group_service import FuzzTestGroupService
from backend.app.services.fuzz_test_case_service import FuzzTestCaseService
from backend.app.schemas.fuzz_test import (
    CreateGroupSchema, UpdateGroupSchema, CreateCase, UpdateCase
)

router = APIRouter()

'''
CRUD 模糊测试用例组
'''
@router.post('/add/group', summary='新增模糊测试用例组', dependencies=[DependsJwtAuth])
async def add_group(request: Request, group: CreateGroupSchema):

    await FuzzTestGroupService.create_group(request, group)
    return await response_base.success()

@router.post('read/group', summary='读取模糊测试用例组', dependencies=[DependsJwtAuth])
async def read_group(request: Request, group_name: str):
    group = await FuzzTestGroupService.read_group(request, group_name)
    print(group)
    return await response_base.success(data=group)

@router.post('/update/group', summary='更新模糊测试用例组', dependencies=[DependsJwtAuth])
async def update_group(request: Request, group: UpdateGroupSchema):
    await FuzzTestGroupService.update_group(request, group)
    return await response_base.success()

@router.post('/delete/group', summary='删除模糊测试用例组', dependencies=[DependsJwtAuth])
async def delete_case_group(request: Request, group: CreateGroupSchema):
    await FuzzTestGroupService.delete_group(request, group.name)
    return await response_base.success()

'''
CRUD 模糊测试用例
'''
@router.post('/read/case', summary="读取模糊测试用例", dependencies=[DependsJwtAuth])
async def read_case(request: Request, group_name: str, case_name: str):
    case = await FuzzTestCaseService.read_case(request, group_name, case_name)
    return await response_base.success(data=case)

@router.post('/update/case', summary='更新模糊测试用例', dependencies=[DependsJwtAuth])
async def update_case(request: Request, group_name: str, case: UpdateCase):
    await FuzzTestCaseService.update_case(request, group_name, case)
    return await response_base.success()

@router.post('/delete/case', summary='删除模糊测试用例', dependencies=[DependsJwtAuth])
async def delete_case(request: Request, group_name: str, case_name: str):
    await FuzzTestCaseService.delete_case(request, group_name, case_name)
    return await response_base.success()

@router.post('/add/case', summary='新增模糊测试用例', dependencies=[DependsJwtAuth])
async def add_case(request: Request, group_name: str, case: CreateCase):
    await FuzzTestCaseService.create_case(request, group_name, case)
    return await response_base.success()






# @router.post('/add/case', summary='新增模糊测试用例', dependencies=[DependsJwtAuth])
# async def add_case(request: Request, case: CreateCase):
#     pass


# @router.post('/add/primitive', summary='新增原语', dependencies=[DependsJwtAuth])
# async def add_primitive(request: Request, primitive: Static):
#     pass