#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from typing import Annotated

from fastapi import APIRouter, Body, Path, Request

from backend.app.schemas.fuzz_test_schema import (
    CreateGroupSchema, UpdateSuiteSchema, CreateCase, UpdateCase, PrimitiveSchema, SuiteSchema
)
from backend.app.common.jwt import DependsJwtAuth
from backend.app.common.response.response_schema import response_base
from backend.app.services.fuzz_test_suite_service import FuzzTestSuiteService
from backend.app.services.fuzz_test_case_service import FuzzTestCaseService
from backend.app.utils.serializers import select_as_dict

router = APIRouter()

###################################################################################################################################

# 新建模糊测试用例/组 原语
@router.post('/create/suite', summary='新建模糊测试用例套件', dependencies=[DependsJwtAuth])
async def create_suite(request: Request, suite: SuiteSchema):
    await FuzzTestSuiteService.create_suite(request, suite)
    return await response_base.success()

@router.post('/create/case', summary='新建模糊测试用例', dependencies=[DependsJwtAuth])
async def add_case(request: Request, suite_name: str, case: CreateCase):
    await FuzzTestCaseService.create_case(request, suite_name, case)
    return await response_base.success()



# #####################################################################################################################3

# 删除 模糊测试用例套件 用例 原语 
@router.delete('/delete/suite', summary='删除模糊测试用例套件', dependencies=[DependsJwtAuth])
async def delete_suite(request: Request, suite_name: str):
    await FuzzTestSuiteService.delete_suite(request, suite_name)
    return await response_base.success()

@router.delete('/delete/case', summary='删除模糊测试用例', dependencies=[DependsJwtAuth])
async def delete_case(request: Request, suite_name: str, case_name: str):
    count = await FuzzTestCaseService.delete_case(request, suite_name, case_name)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="删除失败,请检查用例是否存在")



####################################################################################################################################

@router.get('read/suite', summary='读取模糊测试套件', dependencies=[DependsJwtAuth])
async def read_suite(request: Request, suite_name: str):
    group = await FuzzTestSuiteService.read_suite(request, suite_name)
    group_data =  await select_as_dict(group)
    return await response_base.success(data=group_data)

@router.get('/read/case', summary="读取模糊测试用例", dependencies=[DependsJwtAuth])
async def read_case(request: Request, suite_name: str, case_name: str):
    case = await FuzzTestCaseService.read_case(request, suite_name, case_name)
    case_data = await select_as_dict(case)
    return await response_base.success(data=case_data)



######################################################################################################################################

@router.put('/update/group', summary='更新模糊测试用例组', dependencies=[DependsJwtAuth])
async def update_group(request: Request, group: UpdateSuiteSchema):
    count = await FuzzTestSuiteService.update_suite(request, group)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查组是否存在")

@router.put('/update/case', summary='更新模糊测试用例', dependencies=[DependsJwtAuth])
async def update_case(request: Request, suite_name: str, case: UpdateCase):
    count = await FuzzTestCaseService.update_case(request, suite_name, case)
    if count > 0:
        return await response_base.success()
    return await response_base.fail(data="更新失败,请检查用例是否存在")


######################################################################################################################################

